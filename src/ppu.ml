(*
import memory as mem

colour_palette = [
    (0x75, 0x75, 0x75), # 0x00
    (0x27, 0x1B, 0x8F), # 0x01
    (0x00, 0x00, 0xAB), # 0x02
    (0x47, 0x00, 0x9F), # 0x03
    (0x8F, 0x00, 0x77), # 0x04
    (0xAB, 0x00, 0x13), # 0x05
    (0xA7, 0x00, 0x00), # 0x06
    (0x7F, 0x0B, 0x00), # 0x07
    (0x43, 0x2F, 0x00), # 0x08
    (0x00, 0x47, 0x00), # 0x09
    (0x00, 0x51, 0x00), # 0x0A
    (0x00, 0x3F, 0x17), # 0x0B
    (0x1B, 0x3F, 0x5F), # 0x0C
    (0x00, 0x00, 0x00), # 0x0D
    (0x00, 0x00, 0x00), # 0x0E
    (0x00, 0x00, 0x00), # 0x0F
 
    (0xBC, 0xBC, 0xBC), # 0x10
    (0x00, 0x73, 0xEF), # 0x11
    (0x23, 0x3B, 0xEF), # 0x12
    (0x83, 0x00, 0xF3), # 0x13
    (0xBF, 0x00, 0xBF), # 0x14
    (0xE7, 0x00, 0x5B), # 0x15
    (0xDB, 0x2B, 0x00), # 0x16
    (0xCB, 0x4F, 0x0F), # 0x17
    (0x8B, 0x73, 0x00), # 0x18
    (0x00, 0x97, 0x00), # 0x19
    (0x00, 0xAB, 0x00), # 0x1A
    (0x00, 0x93, 0x3B), # 0x1B
    (0x00, 0x83, 0x8B), # 0x1C
    (0x00, 0x00, 0x00), # 0x1D
    (0x00, 0x00, 0x00), # 0x1E
    (0x00, 0x00, 0x00), # 0x1F

    (0xFF, 0xFF, 0xFF), # 0x20
    (0x3F, 0xBF, 0xFF), # 0x21
    (0x5F, 0x97, 0xFF), # 0x22
    (0xA7, 0x8B, 0xFD), # 0x23
    (0xF7, 0x7B, 0xFF), # 0x24
    (0xFF, 0x77, 0xB7), # 0x25
    (0xFF, 0x77, 0x63), # 0x26
    (0xFF, 0x9B, 0x3B), # 0x27
    (0xF3, 0xBF, 0x3F), # 0x28
    (0x83, 0xD3, 0x13), # 0x29
    (0x4F, 0xDF, 0x4B), # 0x2A
    (0x58, 0xF8, 0x98), # 0x2B
    (0x00, 0xEB, 0xDB), # 0x2C
    (0x00, 0x00, 0x00), # 0x2D
    (0x00, 0x00, 0x00), # 0x2E
    (0x00, 0x00, 0x00), # 0x2F

    (0xFF, 0xFF, 0xFF), # 0x30
    (0xAB, 0xE7, 0xFF), # 0x31
    (0xC7, 0xD7, 0xFF), # 0x32
    (0xD7, 0xCB, 0xFF), # 0x33
    (0xFF, 0xC7, 0xFF), # 0x34
    (0xFF, 0xC7, 0xDB), # 0x35
    (0xFF, 0xBF, 0xB3), # 0x36
    (0xFF, 0xDB, 0xAB), # 0x37
    (0xFF, 0xE7, 0xA3), # 0x38
    (0xE3, 0xFF, 0xA3), # 0x39
    (0xAB, 0xF3, 0xBF), # 0x3A
    (0xB3, 0xFF, 0xCF), # 0x3B
    (0x9F, 0xFF, 0xF3), # 0x3C
    (0x00, 0x00, 0x00), # 0x3D
    (0x00, 0x00, 0x00), # 0x3E
    (0x00, 0x00, 0x00), # 0x3F
]


#  PPU Visual Ram
#
#  +----------------+ 0x10000
#  |    Mirrors     |
#  | 0x0000-0x3FFF  |
#  +----------------| 0x4000
#  |    Mirrors     |
#  | 0x3F00-0x3F1F  |
#  |- - - - - - - - | 0x3F20
#  | Sprite Palette |
#  |- - - - - - - - | 0x3F10
#  |  Image Pallete |
#  +----------------+ 0x3F00
#  |  Name Tables   |
#  +----------------+ 0x2000
#  | Pattern Tables |
#  +----------------+ 0x0000
#

vram = [0] * 0x10000

PPUCTRL   = 0
PPUMASK   = 0
PPUSTATUS = 0
OAMADDR   = 0
OAMADATA  = 0
PPUSCROLL = 0
PPUADDR   = 0
PPUDATA   = 0
OAMDMA    = 0


def initialize():
  global vram

  vram = [0] * 0x10000

def cycle():
  # Read the PPU Control Register 1

  # Read The PPU COntrol Register 2
  print('PPU CTRL:   ', bin(mem.memory[0x2000]))
  print('PPU MASK:   ', bin(mem.memory[0x2001]))
  print('PPU STATUS: ', bin(mem.memory[0x2002]))
  print('OAMADDR:    ', bin(mem.memory[0x2003]))
  print('OAMADATA:   ', bin(mem.memory[0x2004]))
  print('PPUSCROLL:  ', bin(mem.memory[0x2005]))
  print('PPUADDR:    ', bin(mem.memory[0x2006]))
  print('PPUDATA:    ', bin(mem.memory[0x2007]))
  print('OAMDMA:     ', bin(mem.memory[0x4014]))
*)

open Stdint

(* PPU Visual Ram

  +----------------+ 0x10000
  |    Mirrors     |
  | 0x0000-0x3FFF  |
  +----------------| 0x4000
  |    Mirrors     |
  | 0x3F00-0x3F1F  |
  |- - - - - - - - | 0x3F20
  | Sprite Palette |
  |- - - - - - - - | 0x3F10
  |  Image Pallete |
  +----------------+ 0x3F00
  |  Name Tables   |
  +----------------+ 0x2000
  | Pattern Tables |
  +----------------+ 0x0000
*)

let tbl_name    = Array.make_matrix 2 1024 Uint8.zero
let tbl_palette = Array.make 32 Uint8.zero

(** Connections **)
(* Connection to CPU BUS*)
let cpu_read = function
  | 0x0000 -> assert false (* Control *)
  | 0x0001 -> assert false (* Mask *)
  | 0x0002 -> assert false (* Status *)
  | 0x0003 -> assert false (* OAM Address *)
  | 0x0004 -> assert false (* OAM Data *)
  | 0x0005 -> assert false (* Scroll *)
  | 0x0006 -> assert false (* PPU Address *)
  | 0x0007 -> assert false (* PPU Data *)
  | _      -> assert false

let cpu_write address data = match address with
  | 0x0000 -> assert false (* Control *)
  | 0x0001 -> assert false (* Mask *)
  | 0x0002 -> assert false (* Status *)
  | 0x0003 -> assert false (* OAM Address *)
  | 0x0004 -> assert false (* OAM Data *)
  | 0x0005 -> assert false (* Scroll *)
  | 0x0006 -> assert false (* PPU Address *)
  | 0x0007 -> assert false (* PPU Data *)
  | _      -> assert false

(* Connection to PPU BUS*)
let ppu_read address = Uint8.zero
let ppu_write address data = ()


let clock () = assert false
